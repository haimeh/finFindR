shiny::runApp()
install.packages('C:/Users/Jaimie/Documents/dolphinWork/finFindR_0.1.20.zip', INSTALL_opts=c("--no-multiarch"), repos = NULL, type = "win.binary")
install.packages('C:/Users/Jaimie/Documents/dolphinWork/finFindR_0.1.20.zip', INSTALL_opts=c("--no-multiarch"), repos = NULL, type = "win.binary")
shiny::runApp()
runApp()
saveEnvir[["idData"]]
runApp()
rownames(hashData)
hashRow$names
names(sessionQuery$hashData[["Trailing"]])
runApp()
names(saveEnvir$hashData[[finPart]])
names(hashData[[finPart]])
basename(img)
names(traceData[[finPart]])
names(traceCoord[[finPart]])
meh = traceToHash(traceImg[[finPart]][failureIndex],mxnetModel)
meh
?as.data.frame
mehs = as.data.frame(traceToHash(traceImg[[finPart]][failureIndex],mxnetModel),check.names=F)
mehs
row.names(mehs)
colnames(mehs)
runApp()
install.packages('C:/Users/Jaimie/Documents/dolphinWork/finFindR_0.1.20.zip', INSTALL_opts=c("--no-multiarch"), repos = NULL, type = "win.binary")
install.packages("~/dolphinWork/finFindR_0.1.21.zip", repos = NULL, type = "win.binary")
shiny::runApp()
hashSVD
networks
networks <- system.file("extdata", package="finFindR")
load(file.path(networks,"hashSVD.Rdata"))
hashSVD
runApp()
?load
?source
load(file.path(networks,"hashSVD.Rdata"))
runApp()
install.packages("~/dolphinWork/finFindR_0.1.21.zip", repos = NULL, type = "win.binary")
detach(finFindR)
detach("finFindR")
install.packages("~/dolphinWork/finFindR_0.1.21.zip", repos = NULL, type = "win.binary")
getwd()
shiny::runApp()
hashSVD
install.packages("~/dolphinWork/finFindR_0.1.21.zip", repos = NULL, type = "win.binary")
shiny::runApp()
hashSVD
runApp()
shiny::runApp()
shiny::runApp()
install.packages('C:/Users/Jaimie/Documents/dolphinWork/finFindR_0.1.21.zip', INSTALL_opts=c("--no-multiarch"), repos = NULL, type = "win.binary")
shiny::runApp()
runApp()
runApp()
load(file.path(system.file("extdata", package="finFindR"),"hashSVD.Rdata"))
runApp()
runApp()
runApp()
load(file.path(networks,"hashSVD.Rdata")) print(hashSVD$U)
print(hashSVD$U)
install.packages('C:/Users/Jaimie/Documents/dolphinWork/finFindR_0.1.21.zip', INSTALL_opts=c("--no-multiarch"), repos = NULL, type = "win.binary")
install.packages('C:/Users/Jaimie/Documents/dolphinWork/finFindR_0.1.21.zip', INSTALL_opts=c("--no-multiarch"), repos = NULL, type = "win.binary")
shiny::runApp()
shiny::runApp()
hashDataPart
hashDataPart <- traceToHash( list(readyToRetrace$traceResults$annulus ), mxnetModel  )[[1]]
targetEnvir$hashData[[input$segmentTarget]][readyToRetrace$imgName] <- as.data.frame(t(t(hashDataPart) %*% hashSVD$U %*% hashSVD$D))*1000
runApp()
runApp()
runApp()
comparisonResults[[finPart]] <- distanceToRefParallel(queryHashData= queryTmp[[finPart]],
referenceHashData=referTmp[[finPart]],
counterEnvir=counterEnvir,
batchSize = 500,
displayProgressInShiny=T)
comparisonResults[[finPart]]$sortingIndex <- t(comparisonResults[[finPart]]$sortingIndex)
comparisonResults[[finPart]] <- distanceToRefParallel(queryHashData= queryTmp[[finPart]],
referenceHashData=referTmp[[finPart]],
counterEnvir=counterEnvir,
batchSize = 500,
displayProgressInShiny=T)
comparisonResults[[finPart]]$sortingIndex <- t(comparisonResults[[finPart]]$sortingIndex)
finPart
finPart
comparisonResults[[finPart]] <- distanceToRefParallel(queryHashData= queryTmp[[finPart]],
referenceHashData=referTmp[[finPart]],
counterEnvir=counterEnvir,
batchSize = 500,
displayProgressInShiny=T)
comparisonResults[[finPart]]$sortingIndex <- t(comparisonResults[[finPart]]$sortingIndex)
runApp()
as.data.frame(t(rankTable$ID))}
as.data.frame(t(rankTable$ID))
rankTable$ID
finPart
runApp()
runApp()
runApp()
source('~/dolphinWork/finFindR/inst/shiny_app/dataEditing_local.R')
runApp()
as.data.frame(t(t(hashDataPart) %*% hashSVD$U %*% hashSVD$D),check.names=F)*1000
hashDataPart
targetEnvir$hashData[[input$segmentTarget]][readyToRetrace$imgName] <- as.data.frame(t(t(hashDataPart) %*% hashSVD$U %*% hashSVD$D),check.names=F)*1000
newDistances <- distanceToRef( unlist(targetEnvir$hashData[[input$segmentTarget]][readyToRetrace$imgName]),
cbind(data.frame(sessionReference$hashData[[input$segmentTarget]]),(sessionReference$hashData[["Trailing"]]) ) )
newDistances
targetEnvir$hashData[[input$segmentTarget]][readyToRetrace$imgName]
cbind(data.frame(sessionReference$hashData[[input$segmentTarget]]),(sessionReference$hashData[["Trailing"]]) )
sessionReference$hashData[["Trailing"]]
